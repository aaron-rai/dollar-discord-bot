name: Docker Runner

on:
  workflow_dispatch:
    inputs:
      send_patch_notes:
        description: 'Send patch notes after deployment'
        type: boolean
        required: false
        default: false

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v3

      - name: Start Deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: production
          desc: "Starting deployment"

      - name: Run Container
        run: docker compose up -d --build
        env:
          TOKEN: ${{ secrets.TOKEN }}
          GENIUSTOKEN: ${{ secrets.GENIUSTOKEN }}
          LAVALINK_TOKEN: ${{ secrets.LAVALINK_TOKEN }}
          LAVALINK_EMAIL: ${{ secrets.LAVALINK_EMAIL }}
          LAVALINK_PASSWORD: ${{ secrets.LAVALINK_PASSWORD }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          TRACKERGG: ${{ secrets.TRACKERGG }}
          RIOTTOKEN: ${{ secrets.RIOTTOKEN }}
          GHUBTOKEN: ${{ secrets.GHUBTOKEN }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PW: ${{ secrets.DB_PW }}
          DB_SCHEMA: ${{ secrets.DB_SCHEMA }}
          PATCHES_CHANNEL: ${{ secrets.PATCHES_CHANNEL }}
          CASH: ${{ secrets.CASH }}
          SEND_PATCH_NOTES: ${{ inputs.send_patch_notes }}

      - name: Cleanup Unused Images
        run: docker image prune -f

      - name: Update Deployment Status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: production
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
